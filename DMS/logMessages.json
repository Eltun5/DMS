{
  "log" : {
    "user" : {
      "service" : {
        "create" : {
          "try": "Someone try to create a user.",
          "exist": {
            "email": "User with this email already exists.",
            "full-name": "User with this full name already exists.",
            "phone-number": "User with this phone number already exists."
          },
          "success": "User created successfully."
        },
        "get-by-id": "Someone try to get a user by id. Id : ",
        "get-by-email": "Someone try to get a user by email. Email : ",
        "get-by-full-name": "Someone try to get a user by full name. Full name : ",
        "get-by-phone-number": "Someone try to get a user by phone number. Phone number : ",
        "get-all": "Someone try to get all users.",
        "get-all-roles": "Someone try to get all users for corresponding role.",
        "get-active-user": "Someone try to get active users list.",
        "get-deactivate-user": "Someone try to get deactivated users list.",
        "get-deleted-user": "Someone try to get deleted users list.",
        "change-password": {
          "try": "Someone try to change password.",
          "user-not-found-by-user-id": "User is not found. User id : ",
          "wrong-old-password": "Old password is wrong.",
          "wrong-old-password-exception": "Old password is wrong. Please enter correct password.",
          "success": "Password changed successfully."
        },
        "add-department": "Someone try to add department.",
        "remove-department": "Someone try to remove department.",
        "change-user-salary": "Someone try to change salary.",
        "change-user-role": "Someone try to change role.",
        "deactivate-user": "Someone try to deactivate user.",
        "activate-user": "Someone try to activate user.",
        "verify-user": "Someone try to verify user.",
        "update": {
          "try": "Someone try to update a user.",
          "user-not-found": "User is not found.",
          "success": "User successfully updated."
        },
        "delete": "Someone try to delete a user. Id : "
      }
    },
    "department" : {
      "service": {
        "create": {
          "try": "Someone try to create department.",
          "failed": "Cannot create department.",
          "success": "Department created successfully."
        },
        "get-by-name": "Someone try to get department by name.",
        "all-departments": "Someone try to get all departments.",
        "get-active-departments": "Someone try to get active departments.",
        "update": {
          "try": "Someone try to update department.",
          "failed": "Cannot update department.",
          "success": "Department updated successfully."
        },
        "add-employee": "Someone try to add employee in department.",
        "remove-employee": "Someone try to remove employee in department.",
        "deactivate": "Someone try to deactivate department.",
        "activate": "Someone try to activate department."
      }
    },
    "auth": {
      "service": {
        "login":  {
          "try": "Someone try to login. Email : ",
          "user-not-found-by-email": "Email is wrong. Email : ",
          "password-expired": "Password is expired. Please change your password.",
          "wrong-password": "Password is wrong."
        },
        "register": "Someone try to register. Email : ",
        "logout": "Some user try to logout. UserId : " 
      }
    },
    "background-service": {
      "try": "CustomBackgroundService is working.",
      "clean-password": {
        "success": "Old user password histories deleted.",
        "nothing-to-clean": "No old user password histories found."
      },
      "check-employees-salary": "Check employees who are not logged in for 1 month.",
      "pay-employees-salary": "Pay employees salary. Imagine this is code for contact user card info and transfer salary for employees. Employee count: "
    },
    "Jwt": {
      "access-token": "AccessToken generated. AccessToken : ",
      "refresh-token": "RefreshToken generated. RefreshToken : ",
      "invalid-token": "Token is invalid : ",
      "get-email": "Get email from token. Email : ",
      "get-user-id": "Get user id from token. User ID : "
    }
  }
}